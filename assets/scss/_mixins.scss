
/*
	Create breakpoint mixin

	---
	Example usage

	@include add-breakpoint($name, $lower $upper);
	---

	@param $name:   The name of the breakpoint, eg. phone
	@param $lower:  The minimum value of the breakpoint
	@param $upper:  The maximum value of the breakpoint
*/  

$breakpoints: () !default;

@mixin add-breakpoint($name, $dimensions) {
	// Get the nth term in the list of dimensions
	$lower: nth($dimensions, 1);
	$upper: nth($dimensions, 2);
	// Add the new breakpoint to the list
	$breakpoints: append($breakpoints, ($name, ($lower, $upper))) !global;
}



/*
	Return a given breakpoint

	---
	Example usage

	$breakpoint: get-breakpoint($name);
	---

	@param $name:   The name of the breakpoint, eg. phone
*/


@function get-breakpoint($name) {
	@each $breakpoint in $breakpoints {
		@if $name == nth($breakpoint, 1) {
			@return $breakpoint;
		} 
	}

	@error "Attempted to retrieve invalid breakpoint.";
}



/*
	Use breakpoint

	---
	Example usage

	body {
		@include breakpoint($name, $direction) {
			background: red;
		}
	}
	---

	@param $name:                  The name of the breakpoint, eg. phone. Must match existing breakpoint created using add-breakpoint()
	@optional-param $direction:    The direction of the breakpoint, eg. phone and up. False if not passed
	
	@options $direction:  no argument: create media-query between given breakpoints dimensions
												up: create media-query from given breakpoint minimum and up
												down: create media-query from given breakpoint maximum and down
												$breakpoint: create media query between the two given breakpoints  
*/  

@mixin breakpoint($breakpoint, $direction: false) {

	// Is it a custom breakpoint?
	@if get-breakpoint($breakpoint) == false {
		@if $direction == "down" {
			@media screen and (max-width: $breakpoint) {
				@content;
			}
		} @else {
			@media screen and (min-width: $breakpoint) {
				@content;
			}
		}
	} @else {

		// Get the breakpoint
		$breakpoint: get-breakpoint($breakpoint);
		$dimensions: nth($breakpoint, 2);

		@if $direction == false {
			@media screen and (min-width: nth($dimensions, 1)) and (max-width: nth($dimensions, 2)) {
				@content;
			}
		} @else if $direction == "down" {
			@media screen and (max-width: nth($dimensions, 2) - 1) {
				@content;
			}
		} @else if $direction == "up" {
			@media screen and (min-width: nth($dimensions, 2)) {
				@content;
			} 
		} @else if get-breakpoint($direction) != false {
			$second-dimensions: nth(nth(get-breakpoint($direction), 2),2);
			@media screen and (min-width: nth($dimensions, 1)) and (max-width: $second-dimensions) {
				@content;
			}
		}
	}
}


//
// Layout setup
// ------------------------------------------------------------

$padding-modifiers: ();
$margin-modifiers: ();

@mixin add-padding-modifier($name, $modifier) {
	$padding-modifiers: append($padding-modifiers, ($name, $modifier)) !global;
}

@mixin add-margin-modifier($name, $modifier) {
	$margin-modifiers: append($margin-modifiers, ($name, $modifier)) !global;
}

@mixin add-modifier($name, $modifier) {
	@include add-padding-modifier($name, $modifier);
	@include add-margin-modifier($name, $modifier);
}


@function get-modifiers($type) {
	@if $type == "padding" {
		@return $padding-modifiers;
	}
	@else if $type == "margin" {
		@return $margin-modifiers;
	}
	@else {
		@error "Invalid modifier type.";
	}
}

@function get-modifier($type, $name) {
	$modifiers: get-modifiers($type);

	@each $modifier in $modifiers {
		@if $name == nth($modifier, 1) {
			@return nth($modifier, 2);
		} 
	}

	@error "Modifier not found.";
}



//
// Padding/spacing
// ------------------------------------------------------------
/*
	Applies spacing (padding or margin)

	@param $spacing-type: The type of spacing - can either be padding or margin.
	@param $directions:  The directions in which to apply the spacing.
	@param $breakpoint: The breakpoint at which to apply this modifier.
	@param $application: The application of the modifier to the breakpoints. (set, all, up, down)
	@param $value:  The value of the modifier itself to apply.
	@param $absolute: Indicates whether to use ratios when applying the modifier to other breakpoints.
*/  
@mixin spacing($spacing-type, $directions, $breakpoint, $value, $application, $absolute) {
	// Construct the list of applications
	$applications: ();
	$factor: $value / get-modifier($spacing-type, $breakpoint); 


	@if $application == "set" {
		$applications: append($applications, ($breakpoint, $value));
	}
	@else if $application == "all" {
		// Add all applications based on this factor
		$modifiers: get-modifiers($spacing-type);
		
		@each $modifier in $modifiers {
			$modifier-name: nth($modifier, 1);
			$modifier-value: nth($modifier, 2);

			$calculated-value:  $modifier-value * $factor;

			@if $absolute == true {
				$calculated-value: $value;
			}

			$applications: append($applications, ($modifier-name, $calculated-value));
		}
	}
	@else if $application == "up" {
		$skip: true;

		// Add all applications based on this factor
		$modifiers: get-modifiers($spacing-type);
		
		@each $modifier in $modifiers {
			$modifier-name: nth($modifier, 1);
			$modifier-value: nth($modifier, 2);

			@if $modifier-name == $breakpoint {
				$skip: false;
			}

			@if $skip == false {
				$calculated-value:  $modifier-value * $factor;

				@if $absolute == true {
					$calculated-value: $value;
				}
				
				$applications: append($applications, ($modifier-name, $calculated-value));
			}
		}
	}
	@else if $application == "down" {
		$skip: false;

		// Add all applications based on this factor
		$modifiers: get-modifiers($spacing-type);
		
		@each $modifier in $modifiers {
			$modifier-name: nth($modifier, 1);
			$modifier-value: nth($modifier, 2);

			@if $skip == false {
				$calculated-value:  $modifier-value * $factor;

				@if $absolute == true {
					$calculated-value: $value;
				}
				
				$applications: append($applications, ($modifier-name, $calculated-value));
			}

			@if $modifier-name == $breakpoint {
				$skip: true;
			}
		}

	}
	@else {
		@error "Invalid spacing application.";
	}

	// Apply the applications
	@each $app in $applications {
		$app-break: nth($app, 1);
		$app-modifier: nth($app, 2);
		$app-spacing-value: ($app-modifier * $baseline);

		@include breakpoint($app-break) {
			@if length($directions) == 4 {
				#{$spacing-type}: $app-spacing-value;
			}
			@else {
				@each $direction in $directions {
					#{$spacing-type}-#{$direction}: $app-spacing-value;
				}
			}
		}
	}
}


@mixin padding($modifier: 1, $breakpoint: false, $application: "set", $directions: top bottom left right, $absolute: false) {
	@if $breakpoint == false {
		$breakpoint: "desktop";
		$application: "all";
	}

	@include spacing("padding", $directions, $breakpoint, $modifier, $application, $absolute);
}

@mixin margin($modifier: 1, $breakpoint: false, $application: "set", $directions: bottom, $absolute: false) {
	@if $breakpoint == false {
		$breakpoint: "desktop";
		$application: "all";
	}

	@include spacing("margin", $directions, $breakpoint, $modifier, $application, $absolute);
}


//
// Generic value scaling
// ------------------------------------------------------------
@mixin scale($base: 0, $factor: 0.5, $breakpoint: "desktop") {
	$breakpoint-limits: nth(get-breakpoint($breakpoint), 2);
	$breakpoint-base-min-limit: nth($breakpoint-limits, 1);

	// Apply the scale factor for each breakpoint
	@each $break in $breakpoints {
		// Set the value globally so it can be used within the content
		$breakpoint-name: nth($break, 1);
		$breakpoint-min-limit: nth(nth($break, 2), 1);

		$breakpoint-distance-ratio: ($breakpoint-min-limit / $breakpoint-base-min-limit);
		$breakpoint-distance: $breakpoint-distance-ratio - 1;

		$scale-value: $base + ($breakpoint-distance * $factor) !global;

		// Apply the content for this breakpoint
		@include breakpoint($breakpoint-name) {
			@content;
		}
	}
}


//
// Containers
// ------------------------------------------------------------

@mixin container($type: "medium", $size: "", $padding: ($collapse-padding) * 2) {
	@if $size != "" {
		@include outer-container($size + $padding);
	} @elseif $type == "large" {
		@include outer-container($max-width-large + $padding);
	} @elseif $type == "medium" {
		@include outer-container($max-width + $padding);
	} @elseif $type == "small" {
		@include outer-container($max-width-small + $padding);
	}
}
